#include "biquad.h"#include <stdexcept>#include <iostream>#include <math.h>using namespace std;Biquad::Biquad(float _g, float _b0, float _b1, float _b2, float _a0, float _a1, float _a2) :				g(_g), b0(_b0), b1(_b1), b2(_b2), a0(_a0), a1(_a1), a2(_a2){	w = 0.0;	w1 = 0.0;	w2 = 0.0;    y = 0.0;	i = 0;        x1 = 0.0;    x2 = 0.0;    y1 = 0.0;    y2 = 0.0;	//cout << g << " " << b0 << " " << b1 << " " << b2 << " " << a0 << " " << a1 << " " << a2 << endl;}Biquad::Biquad(SOS* _sos) : sos(_sos) {	g = sos->g;	b0 = sos->b0;	b1 = sos->b1;	b2 = sos->b2;	a0 = sos->a0;	a1 = sos->a1;	a2 = sos->a2;}Biquad::~Biquad(){}void Biquad::process(float* x, float* y, uint32_t n_samps){    //using the direct form 2 from https://lcav.gitbook.io/dsp-labs/filter-design/implementation	for(i = 0; i < n_samps; i ++)	{		//w = x[i] - a1*w1 - a2*w2;		//y[i] = g * (b0 * w + b1 * w1 + b2 * w2);		//w2 = w1;		//w1 = w;        y[i] = g * (b0 * x[i] + b1 * x1 + b2 * x2) - a1 * y1 - a2 * y2;        x2 = x1;        x1 = x[i];        y2 = y1;        y1 = y[i];	}}