#include <cstring>#include "biquad.h"namespace tonekids {namespace dsp {Biquad::Biquad(const SOS& _coeffs, float _gain) {    initialize();    coeffs = _coeffs;    gain = _gain;}Biquad::Biquad() {    initialize();}Biquad::~Biquad() {}void Biquad::initialize() {    memset(&coeffs, 0, sizeof(coeffs));    gain = 0.0;    z1 = 0.0;    z2 = 0.0;}void Biquad::process(float* in, float* out, uint32_t nSamp) {    for(uint32_t i = 0; i < nSamp; i++) {        out[i] = (in[i] * coeffs.b0) + z1;        z1 = (out[i] * coeffs.a1) + (in[i] * coeffs.b1) + z2;        z2 = (out[i] * coeffs.a2) + (in[i] * coeffs.b2);    }}void Biquad::DF2TFourthOrderSection(double B0, double B1, double B2, double B3, double B4,                                    double A0, double A1, double A2, double A3, double A4, double _gain) {    coeffs.b0 = B0  / A0 * _gain;    coeffs.b1 = B1  / A0 * _gain;    coeffs.b2 = B2  / A0 * _gain;    coeffs.b3 = B3  / A0 * _gain;    coeffs.b4 = B4  / A0 * _gain;    coeffs.a1 = (-A1) / A0;  // The negation conforms the Direct-Form II Transposed discrete-time    coeffs.a2 = (-A2) / A0;  // filter (DF2T) coefficients to the expectations of the process function.    coeffs.a3 = (-A3) / A0;    coeffs.a4 = (-A4) / A0;    gain = _gain;}void Biquad::DF2TBiquad(double B0, double B1, double B2,                        double A0, double A1, double A2, double _gain) {    coeffs.b0 = B0  / A0 * _gain;    coeffs.b1 = B1  / A0 * _gain;    coeffs.b2 = B2  / A0 * _gain;    coeffs.a1 = (-A1) / A0;  // The negation conforms the Direct-Form II Transposed discrete-time    coeffs.a2 = (-A2) / A0;  // filter (DF2T) coefficients to the expectations of the process function.    gain = _gain;}} /* dsp */} /* tonekids */